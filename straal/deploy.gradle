def getReleaseRepositoryUsername() {
    return hasProperty('RELEASE_REPOSITORY_USERNAME') ? RELEASE_REPOSITORY_USERNAME : ""
}

def getReleaseRepositoryPassword() {
    return hasProperty('RELEASE_REPOSITORY_PASSWORD') ? RELEASE_REPOSITORY_PASSWORD : ""
}


afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME
                from components.release

                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom {
                    name = POM_NAME
                    description = "Straal helper library for mobile payments"
                    url = POM_URL

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }

        repositories {
            maven {
                url = RELEASE_REPOSITORY_URL
                credentials {
                    username getReleaseRepositoryUsername()
                    password getReleaseRepositoryPassword()
                }
            }
        }

        signing {
            useGpgCmd() //https://github.com/gradle/gradle/issues/8657
            sign publishing.publications.release
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    afterEvaluate {
        owner.classpath += android.libraryVariants.find { variant -> variant.name == 'release' }.javaCompileProvider.get().classpath
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    getArchiveClassifier().set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    getArchiveClassifier().set('sources')
    from android.sourceSets.main.java.srcDirs
}
